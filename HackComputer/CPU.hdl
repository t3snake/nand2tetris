// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // control bits for c inatruction
    // ixxaccccccdddjjj
    // i: op code, x: unused, a: switch between A and M
    // d: destination bits, j: jump bits
	
    // last bit: op code decides if A is set from instruction (@012)
    // or from previous computation
    Mux16(a= instruction, b= finalOutputReg, sel= instruction[15], out= inputAReg);
    
    // load A if (C instruction and 3rd destination bit is 1) or (A instruction)
    Not(in= instruction[15], out= isAInstruction);
    And(a= instruction[15], b= instruction[5], out= isCInsAndLoadToA);
    Or(a= isAInstruction, b= isCInsAndLoadToA, out= loadAReg);
    ARegister(in= inputAReg, load= loadAReg, out= outputAReg);

    // Mux of the second input to ALU: Chooses either A or M in ALU
    // selection decided by 'a' bit or instruction[12]
    Mux16(a= outputAReg, b= inM, sel= instruction[12], out= secondALUInput);

    // Load d register if op code is 1 and 2nd destination bit is 1
    And(a= instruction[15], b= instruction[4], out= loadDReg);
    DRegister(in= finalOutputReg, load= loadDReg, out= firstALUInput);

    ALU(x= firstALUInput, y= secondALUInput, 
    zx= instruction[11], nx= instruction[10], zy= instruction[9], 
    ny= instruction[8], f= instruction[7], no= instruction[6], 
    out= finalOutputReg, zr= isZero, ng= isNegative);

    // duplicate outputs since output pin cant be used as input
    And16(a= finalOutputReg, b= true, out= outM);
    And16(a= outputAReg, b= true, out[0..14]= addressM);

    // load m register if op code is 1 and 1st destination bit is 1
    And(a= instruction[3], b= instruction[15], out= writeM);

    // program counter: if jump then load
    // Calculate jump bit = f(jump_bits, alu_ouptuts)
    And(a= instruction[0], b= instruction[1], out= j2AndJ3);
    And(a= j2AndJ3, b= instruction[2], out= andJumpBits);

    Not(in= isZero, out= notIsZero);
    Not(in= isNegative, out= notIsNegative);
    And(a= notIsZero, b= notIsNegative, out= isPositive);

    Nand(a= instruction[2], b= instruction[0], out= j1NandJ3);
    And(a= instruction[1], b= isZero, out= j2AndIsZero);
    And(a= j1NandJ3, b= j2AndIsZero, out= part2);

    Nand(a= instruction[2], b= instruction[1], out= j1NandJ2);
    And(a= instruction[0], b= isPositive, out= j3AndIsPos);
    And(a= j1NandJ2, b= j3AndIsPos, out= part1);

    Nand(a= instruction[0], b= instruction[1], out= j2NandJ3);
    And(a= instruction[2], b= isNegative, out= j1AndIsNeg);
    And(a= j2NandJ3, b= j1AndIsNeg, out= part3);

    Or(a= part1, b= part2, out= part1Orpart2);
    Or(a= part3, b= andJumpBits, out= part3OrAndAll);
    Or(a= part1Orpart2, b= part3OrAndAll, out= jumpBitTemp);

    // load pc only if op code is 1
    And(a= jumpBitTemp, b= instruction[15], out= jumpBit);

    PC(in= outputAReg, load= jumpBit, inc= true, reset= reset, out[0..14]= pc);

}